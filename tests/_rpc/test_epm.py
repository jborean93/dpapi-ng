# Copyright: (c) 2023, Jordan Borean (@jborean93) <jborean93@gmail.com>
# MIT License (see LICENSE or https://opensource.org/licenses/MIT)

from __future__ import annotations

import uuid

from dpapi_ng._rpc import _bind as bind
from dpapi_ng._rpc import _epm as epm


def test_ept_map_pack() -> None:
    expected = (
        b"\x01\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x02\x00\x00\x00\x00\x00\x00\x00"
        b"\x4b\x00\x00\x00\x00\x00\x00\x00"
        b"\x4b\x00\x00\x00\x05\x00\x13\x00"
        b"\x0d\x60\x59\x78\xb9\x4f\x52\xdf"
        b"\x11\x8b\x6d\x83\xdc\xde\xd7\x20"
        b"\x85\x01\x00\x02\x00\x00\x00\x13"
        b"\x00\x0d\x04\x5d\x88\x8a\xeb\x1c"
        b"\xc9\x11\x9f\xe8\x08\x00\x2b\x10"
        b"\x48\x60\x02\x00\x02\x00\x00\x00"
        b"\x01\x00\x0b\x02\x00\x00\x00\x01"
        b"\x00\x07\x02\x00\x00\x87\x01\x00"
        b"\x09\x04\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x04\x00\x00\x00"
    )
    service = bind.SyntaxId(uuid.UUID("b9785960-524f-11df-8b6d-83dcded72085"), 1, 0)
    data_rep = bind.SyntaxId(uuid.UUID("8a885d04-1ceb-11c9-9fe8-08002b104860"), 2, 0)

    msg = epm.EptMap(
        obj=None,
        tower=epm.TCPIPTower(service, data_rep, epm.Protocol.RPC_CONNECTION_ORIENTED, 135, 0),
        entry_handle=None,
        max_towers=4,
    )
    actual = msg.pack()
    assert actual == expected


def test_ept_map_unpack() -> None:
    data = (
        b"\x01\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x02\x00\x00\x00\x00\x00\x00\x00"
        b"\x4b\x00\x00\x00\x00\x00\x00\x00"
        b"\x4b\x00\x00\x00\x05\x00\x13\x00"
        b"\x0d\x60\x59\x78\xb9\x4f\x52\xdf"
        b"\x11\x8b\x6d\x83\xdc\xde\xd7\x20"
        b"\x85\x01\x00\x02\x00\x00\x00\x13"
        b"\x00\x0d\x04\x5d\x88\x8a\xeb\x1c"
        b"\xc9\x11\x9f\xe8\x08\x00\x2b\x10"
        b"\x48\x60\x02\x00\x02\x00\x00\x00"
        b"\x01\x00\x0b\x02\x00\x00\x00\x01"
        b"\x00\x07\x02\x00\x00\x87\x01\x00"
        b"\x09\x04\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x04\x00\x00\x00"
    )
    resp = epm.EptMap.unpack(data)
    assert isinstance(resp, epm.EptMap)
    assert resp.obj is None
    assert resp.tower.service == bind.SyntaxId(uuid.UUID("b9785960-524f-11df-8b6d-83dcded72085"), 1, 0)
    assert resp.tower.data_rep == bind.SyntaxId(uuid.UUID("8a885d04-1ceb-11c9-9fe8-08002b104860"), 2, 0)
    assert resp.tower.protocol == epm.Protocol.RPC_CONNECTION_ORIENTED
    assert resp.tower.port == 135
    assert resp.tower.addr == 0
    assert resp.entry_handle is None
    assert resp.max_towers == 4


def test_ept_map_result_pack() -> None:
    expected = (
        b"\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x03\x00\x00\x00"
        b"\x03\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x03\x00\x00\x00\x00\x00\x00\x00"
        b"\x03\x00\x00\x00\x00\x00\x00\x00"
        b"\x04\x00\x00\x00\x00\x00\x00\x00"
        b"\x05\x00\x00\x00\x00\x00\x00\x00"
        b"\x4b\x00\x00\x00\x00\x00\x00\x00"
        b"\x4b\x00\x00\x00\x05\x00\x13\x00"
        b"\x0d\x60\x59\x78\xb9\x4f\x52\xdf"
        b"\x11\x8b\x6d\x83\xdc\xde\xd7\x20"
        b"\x85\x01\x00\x02\x00\x00\x00\x13"
        b"\x00\x0d\x04\x5d\x88\x8a\xeb\x1c"
        b"\xc9\x11\x9f\xe8\x08\x00\x2b\x10"
        b"\x48\x60\x02\x00\x02\x00\x00\x00"
        b"\x01\x00\x0b\x02\x00\x00\x00\x01"
        b"\x00\x07\x02\x00\xc2\x08\x01\x00"
        b"\x09\x04\x00\x00\x00\x00\x00\x00"
        b"\x4b\x00\x00\x00\x00\x00\x00\x00"
        b"\x4b\x00\x00\x00\x05\x00\x13\x00"
        b"\x0d\x60\x59\x78\xb9\x4f\x52\xdf"
        b"\x11\x8b\x6d\x83\xdc\xde\xd7\x20"
        b"\x85\x01\x00\x02\x00\x00\x00\x13"
        b"\x00\x0d\x04\x5d\x88\x8a\xeb\x1c"
        b"\xc9\x11\x9f\xe8\x08\x00\x2b\x10"
        b"\x48\x60\x02\x00\x02\x00\x00\x00"
        b"\x01\x00\x0b\x02\x00\x00\x00\x01"
        b"\x00\x07\x02\x00\xc2\x06\x01\x00"
        b"\x09\x04\x00\x00\x00\x00\x00\x00"
        b"\x4b\x00\x00\x00\x00\x00\x00\x00"
        b"\x4b\x00\x00\x00\x05\x00\x13\x00"
        b"\x0d\x60\x59\x78\xb9\x4f\x52\xdf"
        b"\x11\x8b\x6d\x83\xdc\xde\xd7\x20"
        b"\x85\x01\x00\x02\x00\x00\x00\x13"
        b"\x00\x0d\x04\x5d\x88\x8a\xeb\x1c"
        b"\xc9\x11\x9f\xe8\x08\x00\x2b\x10"
        b"\x48\x60\x02\x00\x02\x00\x00\x00"
        b"\x01\x00\x0b\x02\x00\x00\x00\x01"
        b"\x00\x07\x02\x00\xc2\x03\x01\x00"
        b"\x09\x04\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00"
    )
    service = bind.SyntaxId(uuid.UUID("b9785960-524f-11df-8b6d-83dcded72085"), 1, 0)
    data_rep = bind.SyntaxId(uuid.UUID("8a885d04-1ceb-11c9-9fe8-08002b104860"), 2, 0)

    msg = epm.EptMapResult(
        entry_handle=None,
        towers=[
            epm.TCPIPTower(service, data_rep, epm.Protocol.RPC_CONNECTION_ORIENTED, 49672, 0),
            epm.TCPIPTower(service, data_rep, epm.Protocol.RPC_CONNECTION_ORIENTED, 49670, 0),
            epm.TCPIPTower(service, data_rep, epm.Protocol.RPC_CONNECTION_ORIENTED, 49667, 0),
        ],
        status=0,
    )
    actual = msg.pack()
    assert actual == expected


def test_ept_map_result_unpack() -> None:
    data = (
        b"\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x03\x00\x00\x00"
        b"\x04\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x03\x00\x00\x00\x00\x00\x00\x00"
        b"\x03\x00\x00\x00\x00\x00\x00\x00"
        b"\x04\x00\x00\x00\x00\x00\x00\x00"
        b"\x05\x00\x00\x00\x00\x00\x00\x00"
        b"\x4b\x00\x00\x00\x00\x00\x00\x00"
        b"\x4b\x00\x00\x00\x05\x00\x13\x00"
        b"\x0d\x60\x59\x78\xb9\x4f\x52\xdf"
        b"\x11\x8b\x6d\x83\xdc\xde\xd7\x20"
        b"\x85\x01\x00\x02\x00\x00\x00\x13"
        b"\x00\x0d\x04\x5d\x88\x8a\xeb\x1c"
        b"\xc9\x11\x9f\xe8\x08\x00\x2b\x10"
        b"\x48\x60\x02\x00\x02\x00\x00\x00"
        b"\x01\x00\x0b\x02\x00\x00\x00\x01"
        b"\x00\x07\x02\x00\xc2\x08\x01\x00"
        b"\x09\x04\x00\x00\x00\x00\x00\x00"
        b"\x4b\x00\x00\x00\x00\x00\x00\x00"
        b"\x4b\x00\x00\x00\x05\x00\x13\x00"
        b"\x0d\x60\x59\x78\xb9\x4f\x52\xdf"
        b"\x11\x8b\x6d\x83\xdc\xde\xd7\x20"
        b"\x85\x01\x00\x02\x00\x00\x00\x13"
        b"\x00\x0d\x04\x5d\x88\x8a\xeb\x1c"
        b"\xc9\x11\x9f\xe8\x08\x00\x2b\x10"
        b"\x48\x60\x02\x00\x02\x00\x00\x00"
        b"\x01\x00\x0b\x02\x00\x00\x00\x01"
        b"\x00\x07\x02\x00\xc2\x06\x01\x00"
        b"\x09\x04\x00\x00\x00\x00\x00\x00"
        b"\x4b\x00\x00\x00\x00\x00\x00\x00"
        b"\x4b\x00\x00\x00\x05\x00\x13\x00"
        b"\x0d\x60\x59\x78\xb9\x4f\x52\xdf"
        b"\x11\x8b\x6d\x83\xdc\xde\xd7\x20"
        b"\x85\x01\x00\x02\x00\x00\x00\x13"
        b"\x00\x0d\x04\x5d\x88\x8a\xeb\x1c"
        b"\xc9\x11\x9f\xe8\x08\x00\x2b\x10"
        b"\x48\x60\x02\x00\x02\x00\x00\x00"
        b"\x01\x00\x0b\x02\x00\x00\x00\x01"
        b"\x00\x07\x02\x00\xc2\x03\x01\x00"
        b"\x09\x04\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00"
    )
    resp = epm.EptMapResult.unpack(data)
    assert isinstance(resp, epm.EptMapResult)
    assert resp.entry_handle is None
    assert len(resp.towers) == 3

    assert resp.towers[0].service == bind.SyntaxId(uuid.UUID("b9785960-524f-11df-8b6d-83dcded72085"), 1, 0)
    assert resp.towers[0].data_rep == bind.SyntaxId(uuid.UUID("8a885d04-1ceb-11c9-9fe8-08002b104860"), 2, 0)
    assert resp.towers[0].protocol == epm.Protocol.RPC_CONNECTION_ORIENTED
    assert resp.towers[0].port == 49672
    assert resp.towers[0].addr == 0

    assert resp.towers[1].service == bind.SyntaxId(uuid.UUID("b9785960-524f-11df-8b6d-83dcded72085"), 1, 0)
    assert resp.towers[1].data_rep == bind.SyntaxId(uuid.UUID("8a885d04-1ceb-11c9-9fe8-08002b104860"), 2, 0)
    assert resp.towers[1].protocol == epm.Protocol.RPC_CONNECTION_ORIENTED
    assert resp.towers[1].port == 49670
    assert resp.towers[1].addr == 0

    assert resp.towers[2].service == bind.SyntaxId(uuid.UUID("b9785960-524f-11df-8b6d-83dcded72085"), 1, 0)
    assert resp.towers[2].data_rep == bind.SyntaxId(uuid.UUID("8a885d04-1ceb-11c9-9fe8-08002b104860"), 2, 0)
    assert resp.towers[2].protocol == epm.Protocol.RPC_CONNECTION_ORIENTED
    assert resp.towers[2].port == 49667
    assert resp.towers[2].addr == 0
